# Comprehensive Implementation Plan for Migrating from @mocks to @mockups

## Phase 1: Full Analysis and Mapping

**High-level Description:**
Create a complete inventory of all mock data usage throughout the application and map the existing mock data structure to the new schema-based approach.

**Detailed Implementation Steps:**

1. **Analyze all components using @mocks**
   ```bash
   # Find all imports from mocks
   grep -r "from '@/mocks" --include="*.tsx" --include="*.ts" ./src
   
   # Find components with internal mock data
   grep -r "const.*mock" --include="*.tsx" --include="*.ts" ./src
   grep -r "const.*data" --include="*.tsx" --include="*.ts" ./src
   ```

2. **Create a usage table**
   - Document every component that uses mock data
   - Record which specific data each component imports
   - Note any local/internal mock data definitions
   
   Format:
   | Component Path | Imports from @mocks | Internal Mock Data |
   |----------------|---------------------|-------------------|
   | src/components/dashboard/home/TodaysEvents.tsx | ALL_EVENTS, TODAY_EVENTS, filterTodayEvents | None |

3. **Map existing mock data to new schemas**
   - For each file in @mocks, detail how it maps to new structure
   
   ```
   events.ts → 
     - ALL_EVENTS → EVENT_SCHEMA.events
     - TODAY_EVENTS → components/dashboard/todaysEvents.ts (TODAY_EVENTS)
     - filterTodayEvents() → components/dashboard/todaysEvents.ts (filterTodayEvents)
   
   users.ts →
     - USERS → USER_SCHEMA.users
     - USER_DETAILS → components/users/userDetails.ts (USER_DETAILS)
   ```

4. **Identify schema gaps**
   - List any data types in @mocks not yet covered by @mockups schemas
   - Note specific fields or structures that need to be added

## Phase 2: Create Additional Schema Files

**High-level Description:**
Complete the schema definitions by creating additional files for all entity types in the application and update the export indices.

**Detailed Implementation Steps:**

1. **Review existing schemas and identify missing ones**
   - Currently have: eventSchema.ts, userSchema.ts
   - Based on @mocks folder, need to add: reportSchema.ts, modalSchema.ts, participantSchema.ts, analyticsSchema.ts

2. **Create each missing schema file**
   For each schema (example for reports):
   ```typescript
   // mockups/schemas/reportSchema.ts
   /**
    * Report Schema
    * 
    * This file defines the complete report data structure for the application.
    * All component-specific mockup data should reference and subset this schema.
    */
   
   // Import any related types
   import { UserSchema } from './userSchema';
   import { EventSchema } from './eventSchema';
   
   // Types for report-related data
   export interface ReportSchema {
     id: string;
     subject: string;
     description: string;
     // Add all fields based on types/dashboard.ts Report interface
     // and existing @mocks/reports.ts
     // ...
   }
   
   // Specific enums/types
   export type ReportPriority = "high" | "medium" | "low";
   export type ReportStatus = "pending" | "reviewing" | "resolved" | "rejected" | "dismissed";
   
   // Sample report data using the schema
   export const REPORT_SCHEMA = {
     // Complete report objects following the schema
     reports: [
       // Convert data from @mocks/reports.ts to new schema format
       // ...
     ],
     
     // Other report-related reference data
     // ...
   };
   ```

3. **Update schema index.ts file**
   ```typescript
   // mockups/schemas/index.ts
   /**
    * Schemas Index
    * 
    * Export all schema definitions for use in component mockups.
    */
   
   export * from './eventSchema';
   export * from './userSchema';
   export * from './reportSchema';
   export * from './modalSchema';
   export * from './participantSchema';
   export * from './analyticsSchema';
   // Add other schemas as created
   ```

4. **Validate schema definitions**
   - Ensure all schemas match their corresponding @types definitions
   - Confirm all fields from existing @mocks are represented
   - Add any missing fields or data structures

## Phase 3: Component-Specific Mock Data Implementation

**High-level Description:**
Create component-specific mockup files that reference the schemas and provide exactly the data needed by each component.

**Detailed Implementation Steps:**

1. **Create the component directory structure**
   ```bash
   # Create additional component mockup directories as needed
   mkdir -p src/mockups/components/reports
   mkdir -p src/mockups/components/modals
   # Add other directories as needed
   ```

2. **Implement dashboard component mockups**
   Create files such as:
   - `components/dashboard/todaysEvents.ts` (already implemented)
   - `components/dashboard/analyticsCharts.ts` (already implemented)
   - `components/dashboard/dashboardReports.ts`
   - `components/dashboard/userStats.ts`
   
   Example implementation:
   ```typescript
   // mockups/components/dashboard/dashboardReports.ts
   /**
    * Dashboard Reports Mockup Data
    * 
    * This file contains mockup data specifically for dashboard report components.
    */
   
   import { REPORT_SCHEMA, ReportStatus } from '../../schemas/reportSchema';
   
   // Interface for dashboard report data
   export interface DashboardReportMock {
     id: string;
     subject: string;
     reportedDate: string;
     priority: string;
     status: ReportStatus;
     // Other fields needed by dashboard report components
   }
   
   // Dashboard report data subset
   export const DASHBOARD_REPORTS: DashboardReportMock[] = REPORT_SCHEMA.reports
     .slice(0, 5) // Get only the first 5 reports for dashboard preview
     .map(report => ({
       id: report.id,
       subject: report.subject,
       reportedDate: report.reportedDate,
       priority: report.priority,
       status: report.status
       // Other fields needed by dashboard components
     }));
   ```

3. **Implement event component mockups**
   Create files such as:
   - `components/events/eventDetails.ts`
   - `components/events/eventList.ts`
   - `components/events/eventForm.ts`

4. **Implement user component mockups**
   Create files such as:
   - `components/users/userProfile.ts` (already implemented)
   - `components/users/userList.ts`
   - `components/users/userActivity.ts`

5. **Implement report component mockups**
   Create files such as:
   - `components/reports/reportDetails.ts`
   - `components/reports/reportList.ts`

6. **Implement modal component mockups**
   Create files such as:
   - `components/modals/eventModal.ts`
   - `components/modals/userModal.ts`
   - `components/modals/reportModal.ts`

7. **Update main mockups index.ts**
   ```typescript
   // mockups/index.ts
   /**
    * Mockups Index
    *
    * Central export point for all mockup data in the application.
    */
   
   // Export schemas
   export * from './schemas';
   
   // Dashboard component mockups
   export * from './components/dashboard/todaysEvents';
   export * from './components/dashboard/analyticsCharts';
   export * from './components/dashboard/dashboardReports';
   export * from './components/dashboard/userStats';
   
   // Event component mockups
   export * from './components/events/eventDetails';
   export * from './components/events/eventList';
   export * from './components/events/eventForm';
   
   // Add other component exports as implemented
   ```

## Phase 4: Integration and Testing (Component Groups)

**High-level Description:**
Systematically update components to use the new mockup data, focusing on one component group at a time to minimize disruption.

**Detailed Implementation Steps:**

### 4.1: Dashboard Components

1. **Identify all dashboard components using mock data**
   ```bash
   grep -r "from '@/mocks" --include="*.tsx" --include="*.ts" ./src/components/dashboard
   ```

2. **Update imports in dashboard components**
   Replace:
   ```typescript
   import { TODAY_EVENTS, EVENT_PARTICIPANTS } from '@/mocks/events';
   ```
   With:
   ```typescript
   import { TODAY_EVENTS, EVENT_PARTICIPANTS } from '@/mockups';
   ```

3. **Update any references to renamed mock data**
   If property/function names have changed, update references

4. **Test dashboard components**
   - Manually test each component
   - Verify data appears correctly
   - Fix any issues found

### 4.2: Event Management Components

1. **Identify all event components using mock data**
   ```bash
   grep -r "from '@/mocks" --include="*.tsx" --include="*.ts" ./src/components/events
   ```

2. **Update imports in event components**
   Replace mocks imports with mockups imports

3. **Test event components**
   - Manually test each component
   - Verify data appears correctly
   - Fix any issues found

### 4.3: User Management Components

1. **Identify all user components using mock data**
   ```bash
   grep -r "from '@/mocks" --include="*.tsx" --include="*.ts" ./src/components/users
   ```

2. **Update imports in user components**
   Replace mocks imports with mockups imports

3. **Test user components**
   - Manually test each component
   - Verify data appears correctly
   - Fix any issues found

### 4.4: Report Management Components

1. **Identify all report components using mock data**
   ```bash
   grep -r "from '@/mocks" --include="*.tsx" --include="*.ts" ./src/components/reports
   ```

2. **Update imports in report components**
   Replace mocks imports with mockups imports

3. **Test report components**
   - Manually test each component
   - Verify data appears correctly
   - Fix any issues found

### 4.5: Modal Components

1. **Identify all modal components using mock data**
   ```bash
   grep -r "from '@/mocks" --include="*.tsx" --include="*.ts" ./src/components/modals
   ```

2. **Update imports in modal components**
   Replace mocks imports with mockups imports

3. **Test modal components**
   - Manually test each component
   - Verify data appears correctly
   - Fix any issues found

## Phase 5: Utilities and Context Integration

**High-level Description:**
Update utility functions, contexts, and hooks that use mock data to import from the new mockups structure.

**Detailed Implementation Steps:**

### 5.1: Update Utility Functions

1. **Identify utility functions using mock data**
   ```bash
   grep -r "from '@/mocks" --include="*.ts" ./src/lib
   ```

2. **Update imports in utility files**
   Replace:
   ```typescript
   import { USERS } from '@/mocks/users';
   ```
   With:
   ```typescript
   import { USER_SCHEMA } from '@/mockups';
   ```

3. **Update function implementations**
   Adjust functions to use the new schema structure:
   ```typescript
   // Before
   const getUser = (id: string) => USERS.find(user => user.id === id);
   
   // After
   const getUser = (id: string) => USER_SCHEMA.users.find(user => user.id === id);
   ```

4. **Test utility functions**
   Verify they still return correct data

### 5.2: Update Contexts

1. **Identify contexts using mock data**
   ```bash
   grep -r "from '@/mocks" --include="*.tsx" ./src/contexts
   ```

2. **Update imports in context files**
   Replace mocks imports with mockups imports

3. **Update context implementations**
   Adjust to use the new schema structure

4. **Test contexts**
   Verify they still provide correct data to components

### 5.3: Update Hooks

1. **Identify hooks using mock data**
   ```bash
   grep -r "from '@/mocks" --include="*.ts" ./src/hooks
   ```

2. **Update imports in hook files**
   Replace mocks imports with mockups imports

3. **Update hook implementations**
   Adjust to use the new schema structure

4. **Test hooks**
   Verify they still provide correct data to components

## Phase 6: Final Cleanup and Validation

**High-level Description:**
Verify the application works correctly with the new mockup structure, remove the old mocks folder, and perform final validation.

**Detailed Implementation Steps:**

1. **Final application testing**
   - Run the entire application
   - Test all major features
   - Verify all components render correctly
   - Check there are no console errors related to mock data

2. **Perform final grep check**
   ```bash
   # Ensure no imports from @mocks remain
   grep -r "from '@/mocks" --include="*.tsx" --include="*.ts" ./src
   ```

3. **Remove @mocks folder**
   ```bash
   # Only after confirming no components still use it
   rm -rf ./src/mocks
   ```

4. **Document the migration**
   - Update README.md with information about mockup data usage
   - Include examples of how to use the new structure
   - Document how to add new mockup data

5. **Final validation**
   - Run all unit/integration tests if available
   - Verify application builds and runs without errors
   - Check that all data renders correctly throughout the application